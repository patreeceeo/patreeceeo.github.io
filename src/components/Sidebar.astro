---
import type { NavigationItem } from '../utils/navigation';
import image from '../content/portfolio/me-duck.webp';
import ImageLink from './ImageLink.astro';

export interface Props {
  navItems: NavigationItem[];
}
const { navItems } = Astro.props;
const width = "20vw";

---
<aside class="Sidebar" data-controller="nav-sidebar thumbnail" data-nav-sidebar-slugs={navItems.filter(item => item.imageSrc).map(item => item.id).join(",")}>
  <div class="Sidebar_thumbnail-container">
    <ImageLink href="/" width="auto" height="100%" imageCssUrl={`url(${image.src})`} data-thumbnail-target="thumbnail"/>
  </div>
  <nav class="Sidebar_nav">
    <ul class="Sidebar_list">
      {navItems.map(item => (
        <li class="Sidebar_item" data-nav-sidebar-target={item.id}>
          <a
            href={item.href}
            class="h1 noTextWrap"
            data-action={item.imageSrc ? "mouseover->thumbnail#set mouseout->thumbnail#reset" : ""}
            data-thumbnail-src-param={item.imageSrc}
          >
            {item.title}
          </a>
        </li>
      ))}
    </ul>
  </nav>
</aside>
<style define:vars={{width}}>
  .Sidebar {
    width: var(--width);
    box-sizing: border-box;
    height: 100%;
    text-align: center;
    background: var(--light-blue);
    overflow: hidden;

    display: flex;
    flex-direction: column;

    /* Ensure the main content is centered in the viewport */
    margin-right: calc(var(--width) * -1);
  }
  .Sidebar_thumbnail-container {
    background: linear-gradient(to bottom, #fff, var(--light-blue));
    padding: 2vh 2vw;

    flex-grow: 1;
    flex-shrink: 1;
  }
  .Sidebar_nav {
    flex-grow: 1;
    flex-shrink: 0;
    flex-basis: 0;
  }
  .Sidebar_list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  .Sidebar_item {
    a {
      padding: 1rem 0;
      text-decoration: none;
    }

    &:hover, &.Sidebar_item--selected {
      background: #fff;
    }
  }
</style>
